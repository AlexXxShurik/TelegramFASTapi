import asyncio
import os
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv
sys.path.append(os.path.dirname(os.path.abspath(os.path.join(__file__, ".."))))
from app.api.imei_service import check_imei_from_api
from app.db.crud import get_all_white_list_users
from app.db.session import get_db

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN") 


class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.bot = Bot(
            token=self.token,
            session=AiohttpSession(),
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher(storage=MemoryStorage())
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤."""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.handle_imei)

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        db = next(get_db())
        users = get_all_white_list_users(db)

        if any(user.user_id == user_id for user in users):
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {first_name}! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        else:
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! –ò–∑–≤–∏–Ω–∏—Ç–µ, –í–∞–º –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")

    async def handle_imei(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å IMEI."""
        imei = message.text.strip()
        if len(imei) not in range(8, 16) or not imei.isdigit():
            await message.answer("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI (8 - 15 —Ü–∏—Ñ—Ä).")
            return

        try:
            response = await check_imei_from_api(imei)
            response_json = await response.json()
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        properties = response_json.get("properties", {})
        device_name = properties.get("deviceName", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        model_desc = properties.get("modelDesc", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        purchase_country = properties.get("purchaseCountry", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        warranty_status = properties.get("warrantyStatus", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        sim_lock = "–î–∞" if properties.get("simLock") else "–ù–µ—Ç"
        fmi_on = "–í–∫–ª—é—á–µ–Ω" if properties.get("fmiOn") else "–û—Ç–∫–ª—é—á–µ–Ω"
        usa_block_status = properties.get("usaBlockStatus", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        response_message = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n"
            f"üì± <b>–ú–æ–¥–µ–ª—å:</b> {device_name}\n"
            f"üîç <b>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:</b> {model_desc}\n"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> {purchase_country}\n"
            f"üõ°Ô∏è <b>–°—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏:</b> {warranty_status}\n"
            f"üîí <b>SIM-Lock:</b> {sim_lock}\n"
            f"üñ≤Ô∏è <b>FMI:</b> {fmi_on}\n"
            f"üá∫üá∏ <b>–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (USA):</b> {usa_block_status}\n"
        )

        await message.answer(response_message, parse_mode="HTML")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        await self.bot.delete_webhook(drop_pending_updates=True)
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    async def main():
        bot_instance = TelegramBot(token=BOT_TOKEN)
        await bot_instance.run()


    asyncio.run(main())
